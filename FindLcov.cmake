# This file is part of CMake-codecov.
#
# CMake-codecov is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful,but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License and GNU
# Lesser General Public License along with this program. If not, see
#
#  http://www.gnu.org/licenses/
#
#
# Copyright (c)
#   2015 RWTH Aachen University, Federal Republic of Germany
#
# Written by Alexander Haase, alexander.haase@rwth-aachen.de
#


#
# configuration
#
set(LCOV_DATA_PATH "${CMAKE_BINARY_DIR}/lcov/data")
set(LCOV_DATA_PATH_INIT "${LCOV_DATA_PATH}/init")
set(LCOV_DATA_PATH_CAPTURE "${LCOV_DATA_PATH}/capture")
set(LCOV_HTML_PATH "${CMAKE_BINARY_DIR}/lcov/html")



# Search for Gcov which is used by Lcov. If it is not found, we can exit this
# module now.
find_package(Gcov)
if (NOT GCOV_FOUND)
    return()
endif (NOT GCOV_FOUND)


# include required Modules
include(FindPackageHandleStandardArgs)


# Search for required lcov binaries.
find_program(LCOV_BIN lcov)
find_program(GENINFO_BIN geninfo)
find_program(GENHTML_BIN genhtml)
find_package_handle_standard_args(lcov
    REQUIRED_VARS LCOV_BIN GENINFO_BIN GENHTML_BIN
)

# enable genhtml C++ demangeling, if c++filt is found
set(GENHTML_CPPFILT_FLAG "")
find_program(CPPFILT_BIN c++filt)
if (NOT CPPFILT_BIN STREQUAL "")
    set(GENHTML_CPPFILT_FLAG "--demangle-cpp")
endif (NOT CPPFILT_BIN STREQUAL "")


# If Lcov was not found, exit module now.
if (NOT LCOV_FOUND)
    return()
endif (NOT LCOV_FOUND)



# Add a new global target to generate initial coverage reports for all targets.
# This target will be used to generate the global initial info file, which is
# used to gather even empty report data.
if (NOT TARGET lcov-capture-init)
    add_custom_target(lcov-capture-init)
endif (NOT TARGET lcov-capture-init)


# This function will add initial capture of coverage data for target <TNAME>,
# which is needed to get also data for objects, which were not loaded at
# execution time. It will call geninfo for every source file of <TNAME> once and
# store the info file in the same directory.
function (lcov_capture_initial_tgt TNAME)
    set(TDIR ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${TNAME}.dir)

    get_target_property(TSOURCES ${TNAME} SOURCES)
    set(GENINFO_FILES "")
    set(LCOV_ARGS "")
    foreach(FILENAME ${TSOURCES})
        # get the right path for filename
        string(REPLACE ".." "__" FILE "${FILENAME}")

        # get relative path for COMMENT
        string(REPLACE "${CMAKE_BINARY_DIR}/" "" FILE_REL "${TDIR}/${FILE}")

        # generate empty coverage files
        set(OUTFILE "${TDIR}/${FILE}.info.init")
        add_custom_command(OUTPUT ${OUTFILE}
            COMMAND ${GENINFO_BIN}
                --base-directory ${PROJECT_SOURCE_DIR}
                --gcov-tool ${GCOV_BIN}
                --initial
                --output-filename ${OUTFILE}
                --quiet
                ${TDIR}/${FILE}.gcno
            DEPENDS ${TNAME} ${TDIR}/${FILE}.gcno
            COMMENT "capturing initial coverage data for ${FILE_REL}"
        )

        list(APPEND GENINFO_FILES ${OUTFILE})
        list(APPEND LCOV_ARGS -a ${OUTFILE})
    endforeach()

    # create path for info files
    file(MAKE_DIRECTORY ${LCOV_DATA_PATH_INIT})

    # Concatenate all files generated by geninfo to a single file per target.
    set(OUTFILE "${LCOV_DATA_PATH_INIT}/${TNAME}.info")
    string(REPLACE "${CMAKE_BINARY_DIR}/" "" FILE_REL "${OUTFILE}")
    add_custom_command(OUTPUT ${OUTFILE}
        COMMAND ${LCOV_BIN}
            ${LCOV_ARGS}
            --base-directory ${PROJECT_SOURCE_DIR}
            --no-extern
            --gcov-tool ${GCOV_BIN}
            --initial
            --output-file ${OUTFILE}
            --quiet
        DEPENDS ${GENINFO_FILES}
        COMMENT "Generating ${FILE_REL}"
    )

    # add target for geninfo file for <TNAME>
    add_custom_target(${TNAME}-capture-init DEPENDS ${OUTFILE})

    # add geninfo file generation to global lcov-geninfo target
    add_dependencies(lcov-capture-init ${TNAME}-capture-init)
    set_property(TARGET lcov-capture-init
        APPEND
        PROPERTY SOURCES ${OUTFILE}
    )
endfunction (lcov_capture_initial_tgt)


# This function will generate the global info file for all targets. It has to be
# called after all other CMake functions in the root CMakeLists.txt file, to get
# a full list of all targets that generate coverage data.
function (lcov_capture_initial)
    # Get a list of all initial info files
    get_target_property(TSOURCES lcov-capture-init SOURCES)
    set(GENINFO_FILES "")
    set(LCOV_ARGS "")
    foreach(FILE ${TSOURCES})
        list(APPEND GENINFO_FILES ${FILE})
        list(APPEND LCOV_ARGS -a ${FILE})
    endforeach()

    # Clear sources to avoid error messages
    set_property(TARGET lcov-capture-init PROPERTY SOURCES "")

    # create path for info files
    file(MAKE_DIRECTORY ${LCOV_DATA_PATH_INIT})

    # Concatenate all files to a single file
    set(OUTFILE "${LCOV_DATA_PATH_INIT}/all_targets.info")
    add_custom_command(OUTPUT ${OUTFILE}
        COMMAND ${LCOV_BIN}
            ${LCOV_ARGS}
            --base-directory ${PROJECT_SOURCE_DIR}
            --no-extern
            --gcov-tool ${GCOV_BIN}
            --output-file ${OUTFILE}
            --quiet
        DEPENDS ${GENINFO_FILES}
    )

    # add dependencie to target lcov-capture-init
    add_custom_target(lcov-geninfo-init ALL
        DEPENDS ${OUTFILE} lcov-capture-init
    )
endfunction (lcov_capture_initial)



# Add a new global target to generate coverage reports for all targets. This
# target will be used to generate the global info file.
if (NOT TARGET lcov-capture)
    add_custom_target(lcov-capture)
endif (NOT TARGET lcov-capture)


# This function will add capture of coverage data for target <TNAME>, which is
# needed to get also data for objects, which were not loaded at execution time.
# It will call geninfo for every source file of <TNAME> once and store the info
# file in the same directory.
function (lcov_capture_tgt TNAME)
    set(TDIR ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${TNAME}.dir)

    get_target_property(TSOURCES ${TNAME} SOURCES)
    set(GENINFO_FILES "")
    set(LCOV_ARGS "")
    foreach(FILENAME ${TSOURCES})
        # get the right path for file
        string(REPLACE ".." "__" FILE "${FILENAME}")

        # get relative path for COMMENT
        string(REPLACE "${CMAKE_BINARY_DIR}/" "" FILE_REL "${TDIR}/${FILE}")

        # Generate coverage files. If no .gcda file was generated during
        # execution, the empty coverage file will be used instead.
        set(OUTFILE "${TDIR}/${FILE}.info")
        add_custom_command(OUTPUT ${OUTFILE}
            COMMAND test -f "${TDIR}/${FILE}.gcda"
                && ${GENINFO_BIN}
                    --base-directory ${PROJECT_SOURCE_DIR}
                    --gcov-tool ${GCOV_BIN}
                    --output-filename ${OUTFILE}
                    --quiet
                    ${TDIR}/${FILE}.gcda
                || cp ${OUTFILE}.init ${OUTFILE}
            DEPENDS ${TNAME} ${TNAME}-capture-init
            COMMENT "capturing coverage data for ${FILE_REL}"
        )

        list(APPEND GENINFO_FILES ${OUTFILE})
        list(APPEND LCOV_ARGS -a ${OUTFILE})
    endforeach()

    # create path for info files
    file(MAKE_DIRECTORY ${LCOV_DATA_PATH_CAPTURE})

    # Concatenate all files generated by geninfo to a single file per target.
    set(OUTFILE "${LCOV_DATA_PATH_CAPTURE}/${TNAME}.info")
    string(REPLACE "${CMAKE_BINARY_DIR}/" "" FILE_REL "${OUTFILE}")
    add_custom_command(OUTPUT ${OUTFILE}
        COMMAND ${LCOV_BIN}
            ${LCOV_ARGS}
            --base-directory ${PROJECT_SOURCE_DIR}
            --gcov-tool ${GCOV_BIN}
            --output-file ${OUTFILE}
            --quiet
        DEPENDS ${GENINFO_FILES}
        COMMENT "Generating ${FILE_REL}"
    )

    # add target for geninfo file for <TNAME>
    add_custom_target(${TNAME}-geninfo DEPENDS ${OUTFILE})

    # add geninfo file generation to global lcov-geninfo target
    add_dependencies(lcov-capture ${TNAME}-geninfo)
    set_property(TARGET lcov-capture
        APPEND
        PROPERTY SOURCES ${OUTFILE}
    )


    # create path for html files
    file(MAKE_DIRECTORY ${LCOV_HTML_PATH}/${TNAME})

    # add target for generating html output for this target only.
    add_custom_target(${TNAME}-genhtml
        COMMAND ${GENHTML_BIN}
            --quiet
            --baseline-file ${LCOV_DATA_PATH_INIT}/${TNAME}.info
            --output-directory ${LCOV_HTML_PATH}/${TNAME}
            --title "${CMAKE_PROJECT_NAME} - target ${TNAME}"
            --prefix ${PROJECT_SOURCE_DIR}
            --sort
            ${GENHTML_CPPFILT_FLAG}
            ${LCOV_DATA_PATH_CAPTURE}/${TNAME}.info
        DEPENDS ${TNAME}-geninfo ${TNAME}-capture-init
    )
endfunction (lcov_capture_tgt)


# This function will generate the global info file for all targets. It has to be
# called after all other CMake functions in the root CMakeLists.txt file, to get
# a full list of all targets that generate coverage data.
function (lcov_capture)
    # call lcov_capture_initial to capture initial data after source compiled
    lcov_capture_initial()


    # Get a list of all initial info files
    get_target_property(TSOURCES lcov-capture SOURCES)
    set(GENINFO_FILES "")
    set(LCOV_ARGS "")
    foreach(FILE ${TSOURCES})
        list(APPEND GENINFO_FILES ${FILE})
        list(APPEND LCOV_ARGS -a ${FILE})
    endforeach()

    # Clear sources to avoid error messages
    set_property(TARGET lcov-capture PROPERTY SOURCES "")

    # create path for info files
    file(MAKE_DIRECTORY ${LCOV_DATA_PATH_CAPTURE})

    # Concatenate all files to a single file
    set(OUTFILE "${LCOV_DATA_PATH_CAPTURE}/all_targets.info")
    add_custom_command(OUTPUT ${OUTFILE}
        COMMAND ${LCOV_BIN}
            ${LCOV_ARGS}
            --base-directory ${PROJECT_SOURCE_DIR}
            --no-extern
            --gcov-tool ${GCOV_BIN}
            --output-file ${OUTFILE}
            --quiet
        DEPENDS ${GENINFO_FILES}
    )

    # add dependencie to target lcov-capture-init
    add_custom_target(lcov-geninfo DEPENDS ${OUTFILE} lcov-capture)


    # create path for html files
    file(MAKE_DIRECTORY ${LCOV_HTML_PATH}/all_targets)

    # Add a new global target for all lcov targets. This target could be used to
    # generate the lcov html output for the whole project instead of calling
    # <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be
    # used to generate a html site for all project data together instead of one
    # for each target.
    add_custom_target(lcov
        COMMAND ${GENHTML_BIN}
            --quiet
            --baseline-file ${LCOV_DATA_PATH_INIT}/all_targets.info
            --output-directory ${LCOV_HTML_PATH}/all_targets
            --title "${CMAKE_PROJECT_NAME}"
            --prefix ${PROJECT_SOURCE_DIR}
            --sort
            ${GENHTML_CPPFILT_FLAG}
            ${LCOV_DATA_PATH_CAPTURE}/all_targets.info
        DEPENDS lcov-geninfo lcov-geninfo-init
    )
endfunction (lcov_capture)



# This function will add lcov evaluation for target <TNAME>. Only sources of
# this target will be evaluated and no dependencies will be added. It will call
# geninfo on any source file of <TNAME> once and store the info file in the same
# directory.
function (add_lcov_target TNAME)
    # capture initial coverage data
    lcov_capture_initial_tgt(${TNAME})

    # capture coverage data after execution
    lcov_capture_tgt(${TNAME})
endfunction (add_lcov_target)



# Add a new global target to generate the lcov html report for the whole project
# instead of calling <TARGET>-genhtml for each target (to create an own report
# for each target). Instead of the lcov target it does not require geninfo for
# all targets, so you have to call <TARGET>-geninfo to generate the info files
# the targets you'd like to have in your report or lcov-geninfo for generating
# info files for all targets before calling lcov-genhtml.
file(MAKE_DIRECTORY ${LCOV_HTML_PATH}/selected_targets)
add_custom_target(lcov-genhtml
    COMMAND ${GENHTML_BIN}
        --quiet
        --output-directory ${LCOV_HTML_PATH}/selected_targets
        --title \"${CMAKE_PROJECT_NAME} - targets `find ${LCOV_DATA_PATH_CAPTURE} -name \"*.info\" ! -name \"all_targets.info\" -exec basename {} .info \\\;`\"
        --prefix ${PROJECT_SOURCE_DIR}
        --sort
        ${GENHTML_CPPFILT_FLAG}
        `find ${LCOV_DATA_PATH_CAPTURE} -name \"*.info\" ! -name \"all_targets.info\"`
)

